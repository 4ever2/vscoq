<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>fileTypes</key>
    <array>
        <string>v</string>
    </array>
    <!-- <key>foldingStartMarker</key>
    <string>(?x:       # turn on extended mode
                          ^        # a line beginning with
                          \s*      # some optional space
                          [{\[]    # the start of an object or array
                          (?!      # but not followed by
                            .*     # whatever
                            [}\]]  # and the close of an object or array
                            ,?     # an optional comma
                            \s*    # some optional space
                            $      # at the end of the line
                          )
                          |        # ...or...
                          [{\[]    # the start of an object or array
                          \s*      # some optional space
                          $        # at the end of the line
                        )</string>
    <key>foldingStopMarker</key>
    <string>(?x:     # turn on extended mode
                         ^      # a line beginning with
                         \s*    # some optional space
                         [}\]]  # and the close of an object or array
                       )</string> -->
    <key>name</key>
    <string>Coq</string>
    <key>patterns</key>
    <array>

        <dict>
            <key>match</key>
            <string>\b(From|Require|Import|Export|Local|Global|Include|Load|Dependency)\b</string>
            <key>comment</key>
            <string>Vernacular import keywords</string>
            <key>name</key>
            <string>keyword.control.import.coq</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b((Open|Close|Delimit|Undelimit|Bind)\s+Scope)\b</string>
            <key>comment</key>
            <string>Vernacular scope keywords</string>
            <key>name</key>
            <string>keyword.control.import.coq</string>
        </dict>

        <dict>
            <key>match</key>
            <string>(Theorem|Lemma|Remark|Fact|Corollary|Property|Proposition|Goal)\s+((\p{L}|[_\u00A0])(\p{L}|[0-9_\u00A0'])*)</string>
            <key>comment</key>
            <string>Theorem declarations</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.source.coq</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>entity.name.function.theorem.coq</string>
                </dict>
            </dict>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(Parameters?|Axioms?|Conjectures?|Variables?|Hypothesis|Hypotheses)(\s+Inline)?\b\s*\(?\s*((\p{L}|[_\u00A0])(\p{L}|[0-9_\u00A0'])*)</string>
            <key>comment</key>
            <string>Assumptions</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.source.coq</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.source.coq</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>entity.name.assumption.coq</string>
                </dict>
            </dict>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(Context)\b\s*`?\s*(\(|\{|\[)?\s*!?\s*((\p{L}|[_\u00A0])(\p{L}|[0-9_\u00A0'])*)</string>
            <key>comment</key>
            <string>Context</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.source.coq</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>entity.name.assumption.coq</string>
                </dict>
            </dict>
        </dict>


        <dict>
            <key>match</key>
            <string>(\b(?:Program)\s+)?\b(Definition|Fixpoint|CoFixpoint|Function|Example|Let(?:\s+Fixpoint|\s+CoFixpoint)?|Instance|Primitive|SubClass)\s+((\p{L}|[_\u00A0])(\p{L}|[0-9_\u00A0'])*)</string>
            <key>comment</key>
            <string>Definitions</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.source.coq</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.source.coq</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>entity.name.function.coq</string>
                </dict>
            </dict>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(Obligation\s+Tactic|Obligations\s+of|Obligations?|Next\s+Obligation(\s+of)?|Solve\s+Obligations(\s+of)?|Solve\s+All\s+Obligations|Admit\s+Obligations(\s+of)?|Instance)\b</string>
            <key>comment</key>
            <string>Obligations</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.source.coq</string>
                </dict>
            </dict>
        </dict>

        <dict>
            <key>match</key>
            <string>(CoInductive|Inductive|Variant|Record|Structure|Class)\s+(>\s*)?((\p{L}|[_\u00A0])(\p{L}|[0-9_\u00A0'])*)</string>
            <key>comment</key>
            <string>Type declarations</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.source.coq</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>entity.name.type.coq</string>
                </dict>
            </dict>
        </dict>

        <dict>
            <key>match</key>
            <string>(Ltac)\s+((\p{L}|[_\u00A0])(\p{L}|[0-9_\u00A0'])*)</string>
            <key>comment</key>
            <string>Ltac declarations</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.source.coq</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>entity.name.function.ltac</string>
                </dict>
            </dict>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(Constructors|Resolve|Rewrite|Ltac|Implicit(\s+Types?)?|Set|Unset|Remove\s+Printing|Arguments|Tactic\s+Notation|(String\s+|Number\s+)?Notation|Infix|Reserved\s+Infix|Reserved\s+Notation|Section|Module\s+Type|Module|End|Check|Eval|Search|Universe|(Identity\s+)?Coercions?|Generalizable\s+All|Generalizable\s+Variable?|Existing\s+Instances?|Existing\s+Class|Canonical|About|Collection|Typeclasses|Opaque|Transparent|Test|Pwd|Cd|Back|BackTo|Strategy|SearchAbout|SearchHead|SearchPattern|SearchRewrite|Create\s+HintDb|Comments|Compute|Combined\s+Scheme|Constraint|Preterm|Prenex\s+Implicits|Optimize\s+Heap|Optimize\s+Proof|Inspect|Guarded)\b</string>
            <key>comment</key>
            <string>Vernacular keywords</string>
            <key>name</key>
            <string>keyword.source.coq</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(Hint(\s+(Constants|Constructors|Cut|Extern|Immediate|Mode|Opaque|Resolve|Rewrite|Transparent|Unfold|Variables|(View\s+for\s+(apply|move))))?)\b</string>
            <key>comment</key>
            <string>Vernacular Hint commands</string>
            <key>name</key>
            <string>keyword.source.coq</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(Print(\s+(All(\s+Dependencies)?|Assumptions|Canonical\s+Projections|Classes|Coercion\s+Paths|Coercions|Custom\s+Grammar|Debug\s+GC|Extraction\s+Blacklist|Extraction\s+Inline|Firstorder\s+Solver|Grammar|Graph|Hint|HintDb|Implicit|Instances|Libraries|LoadPath|Ltac(\s+Signatures)?|ML\s+Modules|ML\s+Path|Module(\s+Type)?|Notation|Opaque\s+Dependencies|Options|Rewrite\s+HintDb|Rings|Scope|Scopes|Strategy|Section|Strategies|Tables?|Term|Transparent\s+Dependencies|Typing\s+Flags|Universes|Universes\s+Subgraph|Visibility))?)\b</string>
            <key>comment</key>
            <string>Vernacular Print commands</string>
            <key>name</key>
            <string>keyword.source.coq</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(Add(\s+(Field|LoadPath|ML\s+Path|Morphism|Parametric\s+Morphism|Parametric\s+Relation|Rec\s+LoadPath|Relation|Ring|Setoid|Zify))?)\b</string>
            <key>comment</key>
            <string>Vernacular Add commands</string>
            <key>name</key>
            <string>keyword.source.coq</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(Ltac2(\s+(Eval|External|Notation|Set|Type))?)\b</string>
            <key>comment</key>
            <string>Vernacular Ltac2 commands</string>
            <key>name</key>
            <string>keyword.source.coq</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(Remove(\s+(Hints|LoadPath))?)\b</string>
            <key>comment</key>
            <string>Vernacular Remove commands</string>
            <key>name</key>
            <string>keyword.source.coq</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(Reset(\s+(Extraction\s+Blacklist|Extraction\s+Inline|Initial|Ltac\s+Profile))?)\b</string>
            <key>comment</key>
            <string>Vernacular Reset commands</string>
            <key>name</key>
            <string>keyword.source.coq</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(Locate(\s+(File|Library|Ltac|Module|Term))?)\b</string>
            <key>comment</key>
            <string>Vernacular Locate commands</string>
            <key>name</key>
            <string>keyword.source.coq</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(Declare\s+(Custom\s+Entry|Instance|Left\s+Step|Module|ML\s+Module|Morphism|Reduction|Right\s+Step|Scope))\b</string>
            <key>comment</key>
            <string>Vernacular Declare commands</string>
            <key>name</key>
            <string>keyword.control.import.coq</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(Show(\s+(Conjectures|Existentials|Goal|Intros?|Lia\s+Profile|Ltac\s+Profile|Match|Obligation\s+Tactic|Proof|Script|Universes|Zify))?)\b</string>
            <key>comment</key>
            <string>Vernacular Show commands</string>
            <key>name</key>
            <string>keyword.source.coq</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(Proof|Qed|Defined|Save|Abort(\s+All)?|Undo(\s+To)?|Restart|Focus|Unfocus|Unfocused|Unshelve)\b</string>
            <key>comment</key>
            <string>Proof keywords</string>
            <key>name</key>
            <string>keyword.source.coq</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(Quit|Drop|Time|Redirect|Timeout|Fail|Succeed)\b</string>
            <key>comment</key>
            <string>Vernacular Debug keywords</string>
            <key>name</key>
            <string>keyword.debug.coq</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(admit|Admitted)\b</string>
            <key>comment</key>
            <string>Admits are bad</string>
            <key>name</key>
            <string>invalid.illegal.admit.coq</string>
        </dict>

        <dict>
            <key>match</key>
            <string>:|\||=|&lt;|&gt;|\*|\+|-|\{|\}|≠|∨|∧|↔|¬|→|≤|≥</string>
            <key>comment</key>
            <string>Operators</string>
            <key>name</key>
            <string>keyword.operator.coq</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(forall|exists|Type|Set|Prop|nat|bool|option|list|unit|sum|prod|comparison|Empty_set)\b|∀|∃</string>
            <key>comment</key>
            <string>Type keywords</string>
            <key>name</key>
            <string>support.type.coq</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(try|repeat|rew|progress|fresh|solve|now|first|tryif|at|once|do|only)\b</string>
            <key>comment</key>
            <string>Ltac keywords</string>
            <key>name</key>
            <string>keyword.control.ltac</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(into|with|eqn|by|move|as|using)\b</string>
            <key>comment</key>
            <string>Common Ltac connectors</string>
            <key>name</key>
            <string>keyword.control.ltac</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(match|lazymatch|multimatch|fun|with|return|end|let|in|if|then|else|fix|for|where|and)\b|λ</string>
            <key>comment</key>
            <string>Gallina keywords</string>
            <key>name</key>
            <string>keyword.control.gallina</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(intro|intros|revert|induction|destruct|auto|eauto|tauto|eassumption|apply|eapply|assumption|constructor|econstructor|reflexivity|inversion|injection|assert|split|esplit|omega|fold|unfold|specialize|rewrite|erewrite|change|symmetry|refine|simpl|intuition|firstorder|generalize|idtac|exist|exists|eexists|elim|eelim|rename|subst|congruence|trivial|left|right|set|pose|discriminate|clear|clearbody|contradict|contradiction|exact|dependent|remember|case|easy|unshelve|pattern|transitivity|etransitivity|f_equal|exfalso|replace|abstract|cycle|swap|revgoals|shelve|unshelve|typeclasses\s+eauto)\b</string>
            <key>comment</key>
            <string>Ltac builtins</string>
            <key>name</key>
            <string>support.function.builtin.ltac</string>
        </dict>

        <dict>
            <key>applyEndPatternLast</key>
            <integer>1</integer>
            <key>begin</key>
            <string>\(\*(?!#)</string>
            <key>end</key>
            <string>\*\)</string>
            <key>name</key>
            <string>comment.block.coq</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#block_comment</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#block_double_quoted_string</string>
                </dict>
            </array>
        </dict>

        <dict>
            <key>match</key>
            <string>\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\.[0-9]+)?))\b</string>
            <key>name</key>
            <string>constant.numeric.gallina</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b(True|False|tt|false|true|Some|None|nil|cons|pair|inl|inr|O|S|Eq|Lt|Gt|id|ex|all|unique)\b</string>
            <key>comment</key>
            <string>Gallina builtin constructors</string>
            <key>name</key>
            <string>constant.language.constructor.gallina</string>
        </dict>

        <dict>
            <key>match</key>
            <string>\b_\b</string>
            <key>name</key>
            <string>constant.language.wildcard.coq</string>
        </dict>

        <dict>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.begin.coq</string>
                </dict>
            </dict>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.end.coq</string>
                </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.double.coq</string>
        </dict>

    </array>

    <key>repository</key>
    <dict>
        <key>block_comment</key>
        <dict>
            <key>applyEndPatternLast</key>
            <integer>1</integer>
            <key>begin</key>
            <string>\(\*(?!#)</string>
            <key>end</key>
            <string>\*\)</string>
            <key>name</key>
            <string>comment.block.coq</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#block_comment</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#block_double_quoted_string</string>
                </dict>
            </array>
        </dict>

        <key>block_double_quoted_string</key>
        <dict>
            <key>applyEndPatternLast</key>
            <integer>1</integer>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.begin.coq</string>
                </dict>
            </dict>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.end.coq</string>
                </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.double.coq</string>
        </dict>

    </dict>

    <key>scopeName</key>
    <string>source.coq</string>
    <key>uuid</key>
    <string>CDE1AD3A-C094-457D-B321-93009C6BCFDA</string>
</dict>
</plist>
