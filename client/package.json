{
	"name": "vscoq",
	"description": "IDE for the Coq Proof Assistant",
  "author": {
    "name": "Christian J. Bell",
    "email": "siegebell@gmail.com"
  },
	"version": "0.0.1",
	"publisher": "siegebell",
  "license": "MIT license (MIT)",
	"engines": {
 		"vscode": "^1.5.3"
	},
	"categories": [
		"Languages"
	],
	"activationEvents": [
		"onLanguage:coq"
	],
	"main": "./out/src/extension",
	"contributes": {
		"languages": [
    { "id": "coq",
			"aliases": ["Coq", "coq", "Gallina", "gallina"],
			"extensions": [".v"],
			"configuration": "./coq.configuration.json"
		}],
		"grammars": [{
			"language": "coq",
			"scopeName": "source.coq",
			"path": "./syntaxes/coq.tmLanguage"
		}],
		"configuration": {
			"type": "object",
			"title": "Coq configuration",
			"properties": {
				"coqtop.coqPath": {
					"type": "string",
					"default": "",
					"description": "Path to coqc and coqtop binaries."
				},
				"coqtop.args": {
					"type": "array",
					"default": [],
					"description": "A list of arguments to send to coqtop."
				},
				"coqtop.loadCoqProject": {
					"type": "boolean",
					"default": true,
					"description": "If true, load settings from _CoqProject, if found at the root of the Code project"
				},
        "coq.moveCursorToFocus": {
          "type": "boolean",
          "default": true,
          "description": "If true, the current editor's cursor position will move as Coq interactively steps forward/backward a command"
        }
        // "nodejs.path": {"type": "string", "default": "C:/Program Files/nodejs/", "description": "Path to Node.js"}
			}
		},
    "commands": [
      {"command": "extension.coq.quit", "title": "Quit", "category": "Coq"},
      {"command": "extension.coq.reset", "title": "Reset", "category": "Coq"},
      {"command": "extension.coq.interrupt", "title": "Interrupt", "category": "Coq"},
      {"command": "extension.coq.stepForward", "title": "Step Forward", "category": "Coq"},
      {"command": "extension.coq.stepBackward", "title": "Step Backward", "category": "Coq"},
      {"command": "extension.coq.interpretToPoint", "title": "Interpret To Point", "category": "Coq"},
      {"command": "extension.coq.interpretToEnd", "title": "Interpret To End", "category": "Coq"},
      {"command": "extension.coq.moveCursorToFocus", "title": "Move cursor to the current focus location", "category": "Coq"},
      {"command": "extension.coq.query.check", "title": "Check", "description": "Check the type of term at the cursor", "category": "Coq"},
      {"command": "extension.coq.query.locate", "title": "Locate", "description": "Locate the term at the cursor", "category": "Coq"},
      {"command": "extension.coq.query.search", "title": "Search", "description": "Search for the term pattern at the cursor", "category": "Coq"},
      {"command": "extension.coq.query.print", "title": "Print", "description": "Print the definition of the term at the cursor", "category": "Coq"},
      {"command": "extension.coq.query.about", "title": "About", "description": "About the term pattern at the cursor", "category": "Coq"}, 
      {"command": "extension.coq.query.searchAbout", "title": "Search About", "description": "SearchAbout for the term pattern at the cursor", "category": "Coq"}, 
      {"command": "extension.coq.query.prompt.check", "title": "Prompt Check", "description": "Check the type of a term", "category": "Coq"},
      {"command": "extension.coq.query.prompt.locate", "title": "Prompt Locate", "description": "Locate a term", "category": "Coq"},
      {"command": "extension.coq.query.prompt.about", "title": "Promptuery About", "description": "About a term", "category": "Coq"}, 
      {"command": "extension.coq.query.prompt.search", "title": "Prompt Search", "description": "Search for a term", "category": "Coq"},
      {"command": "extension.coq.query.prompt.searchAbout", "title": "Prompt Search About", "description": "SearchAbout a term", "category": "Coq"}, 
      {"command": "extension.coq.query.prompt.print", "title": "Query Print", "description": "Print the definition of a term", "category": "Coq"},
      {"command": "extension.coq.display.toggle", "title": "Display options", "category": "Coq"},
      {"command": "extension.coq.display.toggle.implicitArguments", "title": "Display Implicit Arguments", "category": "Coq"},
      {"command": "extension.coq.display.toggle.coercions", "title": "Display Coercions", "category": "Coq"},
      {"command": "extension.coq.display.toggle.rawMatchingExpressions", "title": "Toggle Display Raw Matching Expressions", "category": "Coq"},
      {"command": "extension.coq.display.toggle.notations", "title": "Display Notations", "category": "Coq"},
      {"command": "extension.coq.display.toggle.allBasicLowLevelContents", "title": "Display All Basic Low Level Contents", "category": "Coq"},
      {"command": "extension.coq.display.toggle.existentialVariableInstances", "title": "Display Existential Variable Instances", "category": "Coq"},
      {"command": "extension.coq.display.toggle.universeLevels", "title": "Display Universe Levels", "category": "Coq"},
      {"command": "extension.coq.display.toggle.allLowLevelContents", "title": "Display All LowLevel Contents", "category": "Coq"},
      {"command": "extension.coq.proofView.open", "title": "Open proof view", "category": "Coq"},
      {"command": "extension.coq.proofView.openExternal", "title": "Open proof view in external browser", "category": "Coq"},
      {"command": "extension.coq.ltacProf.start", "title": "Start/reset Ltac profiling", "category": "Coq"},
      {"command": "extension.coq.ltacProf.stop", "title": "Stop Ltac profiling", "category": "Coq"},
      {"command": "extension.coq.ltacProf.getResults", "title": "Get the results of Ltac profiling", "category": "Coq"}
    ],
    "keybindings": [
      {"command": "extension.coq.reset", "key": "Ctrl+Alt+Home", "when": "editorTextFocus && editorLangId == coq"},
      {"command": "extension.coq.interrupt", "key": "Ctrl+Alt+`", "when": "editorTextFocus && editorLangId == coq"},
      {"command": "extension.coq.interrupt", "key": "Ctrl+Alt+Break", "when": "editorTextFocus && editorLangId == coq"},
      {"command": "extension.coq.stepForward", "key": "Ctrl+Alt+Down", "when": "editorTextFocus && editorLangId == coq"},
      {"command": "extension.coq.stepBackward", "key": "Ctrl+Alt+Up", "when": "editorTextFocus && editorLangId == coq"},
      {"command": "extension.coq.interpretToPoint", "key": "Ctrl+Alt+Right", "when": "editorTextFocus && editorLangId == coq"},
      {"command": "extension.coq.interpretToEnd", "key": "Ctrl+Alt+End", "when": "editorTextFocus && editorLangId == coq"},
      {"command": "extension.coq.moveCursorToFocus", "key": "Ctrl+Alt+.", "when": "editorTextFocus && editorLangId == coq"},
      {"command": "extension.coq.query.about", "key": "ctrl+shift+a", "when": "editorTextFocus && editorLangId == coq"},
      {"command": "extension.coq.query.searchAbout", "key": "ctrl+shift+k", "when": "editorTextFocus && editorLangId == coq"},
      {"command": "extension.coq.query.locate", "key": "ctrl+shift+l", "when": "editorTextFocus && editorLangId == coq"},
      {"command": "extension.coq.query.check", "key": "ctrl+shift+c", "when": "editorTextFocus && editorLangId == coq"},
      {"command": "extension.coq.query.print", "key": "ctrl+shift+p", "when": "editorTextFocus && editorLangId == coq"},
      {"command": "extension.coq.display.toggle.implicitArguments", "key": "ctrl+shift+i", "when": "editorTextFocus && editorLangId == coq"},
      {"command": "extension.coq.display.toggle.coercions", "key": "ctrl+shift+c", "when": "editorTextFocus && editorLangId == coq"},
      {"command": "extension.coq.display.toggle.notations", "key": "ctrl+shift+n", "when": "editorTextFocus && editorLangId == coq"},

      {"command": "extension.coq.reset", "key": "Ctrl+Alt+Home", "when": "resourceScheme==coq-view"},
      {"command": "extension.coq.interrupt", "key": "Ctrl+Alt+`", "when": "resourceScheme==coq-view"},
      {"command": "extension.coq.interrupt", "key": "Ctrl+Alt+Break", "when": "resourceScheme==coq-view"},
      {"command": "extension.coq.stepForward", "key": "Ctrl+Alt+Down", "when": "resourceScheme==coq-view"},
      {"command": "extension.coq.stepBackward", "key": "Ctrl+Alt+Up", "when": "resourceScheme==coq-view"},
      {"command": "extension.coq.interpretToPoint", "key": "Ctrl+Alt+Right", "when": "resourceScheme==coq-view"},
      {"command": "extension.coq.interpretToEnd", "key": "Ctrl+Alt+End", "when": "resourceScheme==coq-view"},
      {"command": "extension.coq.display.toggle.implicitArguments", "key": "ctrl+shift+i", "when": "resourceScheme==coq-view"},
      {"command": "extension.coq.display.toggle.coercions", "key": "ctrl+shift+c", "when": "resourceScheme==coq-view"},
      {"command": "extension.coq.display.toggle.notations", "key": "ctrl+shift+n", "when": "resourceScheme==coq-view"}


    ],
    "menus": {
      "editor/context": [
        { "when": "resourceLangId == coq"
        , "command": "extension.coq.interpretToPoint"
        , "group": "navigation"
        },
        { "when": "resourceLangId == coq"
        , "command": "extension.coq.query.check"
        , "group": "queries"
        },
        { "when": "resourceLangId == coq"
        , "command": "extension.coq.query.print"
        , "group": "queries"
        },
        { "when": "resourceLangId == coq"
        , "command": "extension.coq.query.searchAbout"
        , "group": "queries"
        },
        { "when": "resourceLangId == coq"
        , "command": "extension.coq.query.locate"
        , "group": "queries"
        }
      ]
    },
    "snippets": [
        {
            "language": "coq",
            "path": "./snippets/coq.json"
        }
    ]    
	},	
	"scripts": {
		"vscode:prepublish": "npm run compile-server && npm run compile-html-view && npm run compile",
		"compile-server": "cd ../server && npm run compile && cd ../client",
		"compile-html-view": "cd ../html_views && npm run compile && cd ../client",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
    "postinstall": "node ./node_modules/vscode/bin/install"
	},
	"devDependencies": {
    "typescript": "^2.0.3",
    "vscode": "^1.0.0",
		"@types/node": "^6.0.40"
	},
	"dependencies": {
    "vscode-jsonrpc": "3.0.0-alpha.3",
    "vscode-languageclient": "3.0.0-alpha.2",
    "xml2js": "0.4.17",
    "ws": "1.1.1",
    "opener": "1.4.2",
    "@types/xml2js": "^0.0.28",
    "@types/ws": "^0.0.34"
	},
  "repository" :
  { "type" : "git"
  , "url" : "https://github.com/siegebell/vscoq.git"
  }
}
